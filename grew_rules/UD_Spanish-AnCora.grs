strat main { 
  Seq(
    Onf(conditionals),
    Onf(existentials),
    Onf(interrogatives),
    Onf(npn)
  )
}

package conditionals {

    rule Conditional {
        pattern {
            _anchor_-[advcl]->P;
            P-[mark]->S;
            S[lemma=si, upos=SCONJ]           
        }

        without { 
            P->A;
            A[Mood=Sub, Tense=Imp, lemma=haber]
        }
        commands {
            _anchor_.Cxn = "Conditional";
            _anchor_.CxnElt = "Apodosis@p";
            P.CxnElt = "Protasis@f"
        }
    }

    rule Conditional-NegativeEpistemic {
        pattern { 
            _anchor_-[advcl]->P;
                P->A;
                A[Mood=Sub, Tense=Imp, lemma=haber];
            P-[mark]->S1;
            S1[upos=SCONJ,lemma=si]
        }
        without {
            P-[mark]->S2;
            S2[upos=SCONJ,lemma=como]
        }
        commands {
            _anchor_.Cxn = "Conditional-NegativeEpistemic";
            _anchor_.CxnElt = "Apodosis@p";
            P.CxnElt = "Protasis@f"
        }  
    }     
}

package existentials {

    rule Existential-HavePred1 {
        pattern { 
            _anchor_[lemma="haber"];
            e:_anchor_-[obj]->N2;
            N2[upos=NOUN];
            N2-[det]->N3; N3[upos=DET, Definite=Ind]
        }
        commands {
            _anchor_.Cxn = "Existential-HavePred";
            N2.CxnElt = "Pivot@f"
        }
    }
    
    rule Existential-HavePred2 {
        pattern { 
            _anchor_[lemma="haber"]; 
            e:_anchor_-[obj]->N2;
            N2[upos=NOUN];
            N2-[det]->N3; N3[PronType=Ind]
        }
        commands {
            _anchor_.Cxn = "Existential-HavePred";
            N2.CxnElt = "Pivot@f"
        }
    }
}

package interrogatives {

    rule Interrogative-Polar-Direct {
        pattern { 
            _anchor_[upos<>INTJ|PUNCT]; 
            _anchor_->P;
            P[lemma="?"]; _anchor_ << P
        }
        without { _anchor_[PronType=Int|"Int,Rel"]}
        without { X[PronType=Int|"Int,Rel"]}
        without { _anchor_[upos=PRON|ADV, lemma="cómo"]} 
        without { X[upos=PRON|ADV, lemma="cómo"]} % 'cómo' is wrongly annotated
        without { _anchor_-[conj]->Y; Y-[cc]->O; O[lemma=o]} % avoid choice questions.
        commands {
            _anchor_.Cxn = "Interrogative-Polar-Direct";
            _anchor_.CxnElt = "Clause"
        }
    }

    rule Interrogative-Alternative {
        pattern { 
            _anchor_->P; _anchor_[upos<>PUNCT|INTJ]; P[lemma="?"];
            _anchor_-[conj]->Y; Y-[cc]->O; O[lemma=o]
        }
        without { _anchor_[PronType=Int|"Int,Rel"]}
        without { X[PronType=Int|"Int,Rel"]}
        without { Y[PronType=Int|"Int,Rel"]}
        without { X[upos=PRON|ADV, lemma="cómo"]} % 'cómo' is wrongly annotated
        commands {
            _anchor_.Cxn = "Interrogative-Alternative";
            _anchor_.CxnElt = "Choice1";
            Y.CxnElt = "Choice2"
        }  
    }

    rule Interrogative-WHInfo-Direct {
         pattern { 
            _anchor_->P;
            P[lemma="?"]; 
            _anchor_->X; X[PronType=Int|"Int,Rel"];
            X << _anchor_
        }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Direct";
            _anchor_.CxnElt = "Clause";
            X.Cxn = "WHWord"
            }
    }

    rule Interrogative-WHInfo-Indirect1 {
        pattern {
        	_anchor_ ->H;
            H-[det]->P;
            P[PronType=Int];
        }
        without { QM[lemma="?"] }
        without {_anchor_-[root|appos]->H}
        without { _anchor_ -> EM; EM[PuncType=Excl]}
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Indirect";
            _anchor_.CxnElt = "Clause";
            P.Cxn = "WHWord"
        }
    }

    rule Interrogative-WHInfo-Indirect2 {
        pattern {
            _anchor_ ->P;
            P[PronType=Int];
        }
        without { QM[lemma="?"] }
        without {_anchor_-[conj|flat|det|compound]->P}
        without { _anchor_ -> EM; EM[PunctType=Excl]}
        without { _anchor_[upos=ADJ] } % Annotation errors
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Indirect";
            _anchor_.CxnElt = "Clause";
            P.Cxn = "WHWord"
        }
    }

    rule Interrogative-Polar-Indirect {
        pattern {
            _anchor_-[mark]-> SI;
            H-[ccomp]->_anchor_;
            SI[lemma=si]
        }
        without { QM[lemma="?"] }
        commands {
            _anchor_.Cxn = "Interrogative-Polar-Indirect";
            _anchor_.CxnElt = "Clause"
        }
    }

}

package npn {

    rule npn {
        pattern { 
            _anchor_[upos=NOUN]; P[upos=ADP]; N2[upos=NOUN];
            _anchor_ < P; P < N2 ;
            _anchor_.lemma = N2.lemma;
        }
        without {_anchor_-[case]->X; X << _anchor_}
        without {A[upos=ADP]; A->_anchor_}
        commands {
            _anchor_.Cxn = "NPN";
            _anchor_.CxnElt = "N1";
            P.CxnElt = "P";
            N2.CXnElt = "N2"
        }
    }
}