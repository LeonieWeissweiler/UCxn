strat main { 
  Seq(
    Onf(conditionals),
    Onf(existentials),
    Onf(interrogatives),
    Onf(npn)
  )
}

package conditionals {

    rule ConditionalNegativeEpistemicRule {
        pattern {
            SE[form="se"|"caso", upos=SCONJ];
            PRO[Mood=Sub, Tense=Imp];
            PRO-[mark]->SE;
            _anchor_-[advcl]->PRO;
        }
        commands {
            _anchor_.Cxn = "Conditional-NegativeEpistemic";
            _anchor_.CxnElt = "Apodosis@p";
            PRO.CxnElt = "Protasis@p";
        }
    }

    rule ConditionalNegativeEpistemicWithAuxRule {
        pattern {
            SE[form="se"|"caso", upos=SCONJ];
            AUX[Mood=Sub, Tense=Imp];
            PRO-[mark]-> SE;
            PRO-[cop|aux:pass|aux]-> AUX;
            _anchor_-[advcl]-> PRO;
        }
        global { sent_id <> "CF27-4" }
        commands {
            _anchor_.Cxn = "Conditional-NegativeEpistemic";
            _anchor_.CxnElt = "Apodosis@p";
            PRO.CxnElt = "Protasis@p";
        }
    }

    rule ConditionalNeutralEpistemicRule {
        pattern {
            SE[form="se"|"caso", upos=SCONJ];
            PRO[Mood=Sub, Tense<>Imp];
            PRO-[mark]->SE;
            _anchor_-[advcl]-> PRO;
        }
        commands {
            _anchor_.Cxn = "Conditional-NeutralEpistemic";
            _anchor_.CxnElt = "Apodosis@p";
            PRO.CxnElt = "Protasis@p";
        }
    }

    rule ConditionalNeutralEpistemicWithAuxRule {
        pattern {
            SE [form="se"|"caso", upos=SCONJ];
            AUX [Mood=Sub, Tense<>Imp];
            PRO-[mark]-> SE;
            PRO-[cop|aux:pass|aux]-> AUX;
            _anchor_-[advcl]-> PRO;
        }
        commands {
            _anchor_.Cxn = "Conditional-NeutralEpistemic";
            _anchor_.CxnElt = "Apodosis@p";
            PRO.CxnElt = "Protasis@p";
        }
    }

    rule ConditionalOtherRule {
        pattern {
            SE[form="se"|"caso", upos=SCONJ];
            PRO[Mood<>Sub];
            PRO-[mark]-> SE;
            _anchor_-[advcl]-> PRO;
        }
        global { sent_id <> "CP309-2" } 
        commands {
            _anchor_.Cxn = "Conditional-UnspecifiedEpistemic";
            _anchor_.CxnElt = "Apodosis@p";
            PRO.CxnElt = "Protasis@p";
        }
    }

    rule ConditionalOtherWithAuxRule {
        pattern {
            SE[form="se"|"caso", upos=SCONJ];
            AUX[Mood<>Sub];
            PRO-[mark]-> SE;
            PRO-[cop|aux:pass|aux]-> AUX;
            _anchor_-[advcl]-> PRO;
        }
        commands {
            _anchor_.Cxn = "Conditional-UnspecifiedEpistemic";
            _anchor_.CxnElt = "Apodosis@p";
            PRO.CxnElt = "Protasis@p";
        }
    }

}

package existentials {

    rule ExistentialRule {
        pattern {
            _anchor_[lemma="haver"];
            _anchor_-[obj]->PIV;
        }
        commands {
            _anchor_.Cxn = "Existential-HavePred";
            PIV.CxnElt = "Pivot@f";
        }
    }

    rule ExistentialHavePredRule {
        pattern { 
            _anchor_[lemma="ter", Person=3]; 
            _anchor_-[obj]->PIV;
            *-[root]->_anchor_;
        }
        without { _anchor_-[nsubj|csubj]->S }
        global { sent_id = "CF151-36"|"CF151-50"|"CF227-5"|"CF429-3"|"CF542-3"|"CF865-3" }

        commands {
            _anchor_.Cxn = "Existential-HavePred";
            PIV.CxnElt = "Pivot@f";
        }
    }

    rule ExistentialExistPredRule {
        pattern {
            _anchor_[lemma="existir"];
            _anchor_-[obj]->PIV;
        }

        commands {
            _anchor_.Cxn = "Existential-ExistPred";
            PIV.CxnElt = "Pivot@f";
        }
    }

}

package interrogatives {

    rule InterrogativeWHInfoDirectRule1 {
        pattern {
            _anchor_[PronType=Int];
            _anchor_-[nsubj]->PRED;
            IN[lemma="?"];
        }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Direct";
            _anchor_.CxnElt = "WHWord";
            PRED.CxnElt = "Clause@p";
        }
    }

    rule InterrogativeWHInfoDirectRule2 {
        pattern {
            QU[PronType=Int];
            IN[lemma="?"];
            _anchor_->QU;
        }
        without { QU-[nsubj]->S; }
        global { sent_id <> "CP184-7" | "CP352-1" }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Direct";
            _anchor_.CxnElt = "Clause@p";
            QU.CxnElt = "WHWord";
        }
    }

    rule InterrogativeWHInfoDirectRule3 {
        pattern {
            _anchor_ [lemma="como"|"onde"|"quanto", upos=ADV, !PronType];
            IN [lemma="?"];
            _anchor_-[nsubj]->PRED;
        }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Direct";
            _anchor_.CxnElt = "WHWord";
            PRED.CxnElt = "Clause@p";
        }
    }

    rule InterrogativeWHInfoDirectRule4 {
        pattern {
            QU [lemma="como"|"onde"|"quanto", upos=ADV, !PronType];
            IN [lemma="?"];
            _anchor_-[advmod]->QU;
        }
        without { QU-[nsubj]->S; }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Direct";
            _anchor_.CxnElt = "Clause@p";
            QU.CxnElt = "WHWord";
        }
    }

    rule InterrogativeWHInfoDirectRule5 {
        pattern {
            P [lemma="por", upos=ADP];
            Q [PronType=Ind];
            Q -[case]-> P;
            P < Q;
            IN [lemma="?"];
            _anchor_-[obl]->Q;
        }
        global { sent_id <> "CF856-4"; }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Direct";
            _anchor_.CxnElt = "Clause@p";
            Q.CxnElt = "WHWord@f";
        }
    }

    rule InterrogativeWHInfoDirectRule6 {
        pattern {
            PQ [lemma="porque", upos=ADV];
            IN [lemma="?"];
            _anchor_-[advmod]->PQ;
        }
        global { sent_id <> "CP137-1"; }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Direct";
            _anchor_.CxnElt = "Clause@p";
            PQ.CxnElt = "WHWord";
        }
    }

    rule InterrogativeWHInfoDirectRule7 {
        pattern {
            *-[root]->_anchor_;
            _anchor_ [lemma="como"|"onde"|"quanto", upos=ADV, !PronType];
            IN [lemma="?"];
        }
        without { _anchor_-[nsubj]->S; }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Direct";
            _anchor_.Clause = "Clause";
            _anchor_.CxnElt = "WHWord";
        }
    }

    rule InterrogativeWHInfoIndirectRule1 {
        pattern {
            _anchor_ [PronType=Int];
            _anchor_-[nsubj]->PRED;
        }
        without { IN [lemma="?"]; }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Indirect";
            _anchor_.CxnElt = "WHWord";
            PRED.CxnElt = "Clause@p";
        }
    }

    rule InterrogativeWHInfoIndirectRule2 {
        pattern {
            QU [PronType=Int];
            _anchor_->QU;
        }
        without { IN [lemma="?"]; }
        without { QU-[nsubj]->S; }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Indirect";
            _anchor_.CxnElt = "Clause@p";
            QU.CxnElt = "WHWord";
        }
    }

    rule InterrogativePolarDirectRule1 {
        pattern {
            IN [lemma="?"];
            _anchor_[upos<>INTJ|PRON];
            _anchor_->IN;
        }
        without { PRED[PronType=Int]; }
        without { PRED[lemma="como"|"onde"|"quanto"|"qual"|"porque"]; }
        without { WH[PronType=Int]; }
        without { WH[lemma="como"|"onde"|"quanto"|"qual"|"porque"]; }
        without { WH[lemma="que"]; PRED-[advmod|obl]->WH; }
        without { PRED-[parataxis]->X; }
        global { sent_id <> "CF78-1"|"CF141-2" }
        commands {
            _anchor_.Cxn = "Interrogative-Polar-Direct";
            _anchor_.CxnElt = "Clause@p";
        }
    }

    rule InterrogativePolarDirectRule2 {
        pattern {
            PAR[upos=NOUN|PROPN];
            _anchor_[upos<>INTJ|PRON];
            IN [lemma="?"];
            PAR->IN;
            PAR-[parataxis]->_anchor_;
        }
        without { PRED[PronType=Int]; }
        without { PRED[lemma="como"|"onde"|"quanto"|"qual"|"porque"]; }
        without { WH[PronType=Int]; }
        without { WH[lemma="como"|"onde"|"quanto"|"qual"|"porque"]; }
        without { WH[lemma="que"]; PRED-[advmod|obl]->WH; }
        global { sent_id <> "CF78-1"|"CF141-2" }
        commands {
            _anchor_.Cxn = "Interrogative-Polar-Direct";
            _anchor_.CxnElt = "Clause@p";
        }
    }

    rule InterrogativePolarIndirectRule {
        pattern {
            SE [lemma="se", upos=SCONJ];
            _anchor_-[mark]->SE;
            PRED-[ccomp]->_anchor_;
        }
        commands {
            _anchor_.Cxn = "Interrogative-Polar-Indirect";
            _anchor_.CxnElt = "Clause@p";
        }
    }

    rule InterrogativeAlternativeRule1 {
        pattern {
            OR [lemma="ou"];
            IN [lemma="?"];
            _anchor_-[^root]->CH1;
            CH1-[conj]->CH2;
            CH2-[cc]->OR;
            CH1->IN;
        }
        without { CH1-[conj]->CH3; }
        commands {
            _anchor_.Cxn = "Interrogative-Alternative";
            _anchor_.CxnElt = "Clause";
            CH1.CxnElt = "Choice1";
            CH2.CxnElt = "Choice2";
        }
    }

    rule InterrogativeAlternativeRule1NoVerb {
        pattern {
            OR [lemma="ou"];
            IN [lemma="?"];
            *-[root]->_anchor_;
            _anchor_-[conj]->CH2;
            CH2-[cc]->OR;
            _anchor_->IN;
        }
        without { _anchor_-[conj]->CH3 }
        commands {
            _anchor_.Cxn = "Interrogative-Alternative";
            _anchor_.CxnElt = "Clause";
            _anchor_.CxnElt = "Choice1";
            CH2.CxnElt = "Choice2";
        }
    }

    rule InterrogativeAlternativeRule2 {
        pattern {
            OR [lemma="ou"];
            IN [lemma="?"];
            _anchor_-[^root]->CH1;
            CH1-[conj]->CH2;
            CH1-[conj]->CH3;
            CH3-[cc]->OR;
            CH1->IN;    
            CH1 << CH2;
            CH2 << CH3
        }
        without { CH1-[conj]->CH4 }
        commands {
            _anchor_.Cxn = "Interrogative-Alternative";
            _anchor_.CxnElt = "Clause";
            CH1.CxnElt = "Choice1";
            CH2.CxnElt = "Choice2";
            CH3.CxnElt = "Choice3";
        }
    }

    rule InterrogativeAlternativeRule2NoVerb  {
        pattern {
            OR [lemma="ou"];
            IN [lemma="?"];
            *-[root]->_anchor_;
            _anchor_-[conj]->CH2;
            _anchor_-[conj]->CH3;
            CH3-[cc]->OR;
            CH2->IN;
            _anchor_ << CH2; 
            CH2 << CH3;
        }
        without { _anchor_-[conj]->CH3 }
        commands {
            _anchor_.Cxn = "Interrogative-Alternative";
            _anchor_.CxnElt = "Clause";
            _anchor_.CxnElt = "Choice1";
            CH2.CxnElt = "Choice2";
            CH3.CxnElt = "Choice3";
        }
    }

    rule InterrogativeAlternativeRule3NoVerb {
        pattern {
            OR [lemma="ou"];
            IN [lemma="?"];
            _anchor_-[^root]->CH1;
            CH1-[conj]->CH2;
            CH1-[conj]->CH3;
            CH1-[conj]->CH4;
            CH4-[cc]->OR;
            CH1->IN;
            CH1 << CH2;
            CH2 << CH3;
            CH3 << CH4
        }
        commands {
            _anchor_.Cxn = "Interrogative-Alternative";
            _anchor_.CxnElt = "Clause";
            CH1.CxnElt = "Choice1";
            CH2.CxnElt = "Choice2";
            CH3.CxnElt = "Choice3";
            CH4.CxnElt = "Choice4";
        }
    }

    rule InterrogativeAlternativeRule3NoVerb {
        pattern {
            OR [lemma="ou"];
            IN [lemma="?"];
            *-[root]->_anchor_;
            _anchor_-[conj]->CH2;
            _anchor_-[conj]->CH3;
            _anchor_-[conj]->CH4;
            CH4-[cc]->OR;
            _anchor_->IN;
            _anchor_ << CH2;
            CH2 << CH3;
            CH3 << CH4
        }
        commands {
            _anchor_.Cxn = "Interrogative-Alternative";
            _anchor_.CxnElt = "Clause";
            _anchor_.CxnElt = "Choice1";
            CH2.CxnElt = "Choice2";
            CH3.CxnElt = "Choice3";
            CH4.CxnElt = "Choice4";
        }
    }
}

package npn {

    rule NPNRule {
        pattern {
            _anchor_[upos=NOUN];
            P[upos=ADP];
            N2[upos=NOUN];
            _anchor_ < P;
            P < N2;
            _anchor_.lemma = N2.lemma;
        }
        without { _anchor_-[case]->X; X << _anchor_ }
        without { X-[fixed]->_anchor_ }
        commands {
            _anchor_.Cxn = "NPN";
            _anchor_.CxnElt = "N1";
            P.CxnElt = "P";
            N2.CxnElt = "N2";
        }
    }

}
