    strat main { 
    Seq(
        Onf(conditionals),
        Onf(existentials),
        Onf(interrogatives),
        Onf(npn)
        )
    }

    package conditionals {

        rule cond6 { %what-if conditional Example: "What if Google Morphed Into GoogleOS?"
            pattern { 
                _anchor_ -[advcl]-> P;
                P -[mark]-> M;
                M [lemma="if"];
                _anchor_ [lemma="what"];
                _anchor_ < M;
            }
            commands {
                _anchor_.Cxn="Conditional-Interrogative";
                _anchor_.CxnElt="Apodosis";
                P.CxnElt="Protasis";
            }
        }

        rule cond1 { %reduced unspecified conditional %Example: "We will still be around to assist them if needed."
            pattern { 
                _anchor_ -[advcl]-> P;
                P -[mark]-> I;
                I [lemma="if"];
            }
            without { % not NegativeEpistemic
                _anchor_-[aux]->H;
                H[lemma=have];
                _anchor_-[aux]->M;
                M[xpos=MD]
            }
            without { P-[1=nsubj|csubj|expl]-> Z; } % reduced
            without { _anchor_ [lemma="what"]; } % Conditional-Interrogative
            without { % exclude "willing to cooperate (even if lukewarmly) - not exactly conditional, more of a concession?; "as if" - manner
                A [lemma="as"|"even"];
                A < I;
            }
            commands {
                _anchor_.Cxn="Conditional-UnspecifiedEpistemic-Reduced";
                _anchor_.CxnElt="Apodosis";
                P.CxnElt="Protasis";
            }
        }

        rule cond1N { %reduced counterfactual modal conditional %Example: "It would have been distorted if printed as it was."
            pattern {
                _anchor_ -[advcl]-> P;
                P -[mark]-> I;
                I [lemma="if"];
            }
            with { % NegativeEpistemic
                _anchor_-[aux]->H;
                H[lemma=have];
                _anchor_-[aux]->M;
                M[xpos=MD]
            }
            without { P-[1=nsubj|csubj|expl]-> Z; } % reduced
            without { _anchor_ [lemma="what"]; } % Conditional-Interrogative
            without { % exclude "willing to cooperate (even if lukewarmly) - not exactly conditional, more of a concession?; "as if" - manner
                A [lemma="as"|"even"];
                A < I;
            }
            commands {
                _anchor_.Cxn="Conditional-NegativeEpistemic-Reduced";
                _anchor_.CxnElt="Apodosis";
                P.CxnElt="Protasis";
            }
        }

        rule cond2 { %counterfactual modal conditional %Example: "If it had any merit, Bush should have declined to run himself."
            pattern { 
                _anchor_ -[advcl]-> P;
                P -[mark]-> I;
                I [lemma="if"];
                M [xpos="MD"];
                H [lemma="have"];
                _anchor_ -[aux]->H;
                _anchor_ -[aux]-> M;
            }
            with { P-[1=nsubj|csubj|expl]-> Z; } % nonreduced
            without { _anchor_ [lemma="what"]; }
            commands {
                _anchor_.Cxn="Conditional-NegativeEpistemic-NoInversion";
                _anchor_.CxnElt="Apodosis";
                P.CxnElt="Protasis";
            }
        }

        rule cond3 { %counterfactual modal inverted conditional %Example: "They would have plunged their knives into me could they have seen how to escape the consequences of the deed."
            pattern { 
                _anchor_ -[advcl]-> P;
                M [xpos="MD"];
                H [lemma="have"];
                _anchor_ -[aux]->H;
                _anchor_ -[aux]-> M;
                P -[1=nsubj|csubj|expl]-> S;
                H2 [lemma = "have"];
                P -[aux]-> H2;
                H2 << S;
            }
            without { _anchor_ [lemma="what"]; }
            commands {
                _anchor_.Cxn="Conditional-NegativeEpistemic-SubjVerbInversion";
                _anchor_.CxnElt="Apodosis";
                P.CxnElt="Protasis";
            }
        }

        rule cond4 { %unspecified inverted conditional %Example: "I would be delighted to host should you ever have occasion to visit Houston."
            pattern { 
                _anchor_ -[advcl]-> P;
                M [xpos="MD"];
                _anchor_ -[aux]-> M;
                P -[1=nsubj|csubj|expl]-> S;
                H2 [upos="AUX"];
                P -[aux]-> H2;
                H2 << S;
            }
            without {
                _anchor_ -[aux]-> H;
                H [lemma="have"];
            }
            without { _anchor_ [lemma="what"]; }
            commands {
                _anchor_.Cxn="Conditional-UnspecifiedEpistemic-SubjVerbInversion";
                _anchor_.CxnElt="Apodosis";
                P.CxnElt="Protasis";
            }
        }

        rule cond7 { %unspecified conditional %Example: "Can police trace a cell phone even if it is switched off?"
            pattern { 
                _anchor_ -[advcl]-> P;
                P -[mark]-> M;
                M [lemma="if"];
                P -[1=nsubj|csubj|expl]-> S;
            }
            without {
                MD [xpos="MD"];
                _anchor_ -[aux]-> MD;
                H [lemma="have"];
                _anchor_ -[aux]->H;
            }
            without { _anchor_ [lemma="what"]; }
            commands {
                _anchor_.Cxn="Conditional-UnspecifiedEpistemic-NoInversion";
                _anchor_.CxnElt="Apodosis";
                P.CxnElt="Protasis";
            }
        }
    }

    package existentials {

        rule ex1 { %exist lemma existentials
            pattern { 
                _anchor_ [lemma="exist"];
                _anchor_ -[re".subj"]-> P;
            }
            without {
                _anchor_ -> Y;
                Y [xpos="EX"];
            }
            commands {_anchor_.Cxn="Existential-ExistPred-NoExpl";
                      P.CxnElt="Pivot";}
        }

        rule ex2 { %existential there-exist
            pattern { 
                _anchor_ [lemma="exist"];
                _anchor_ -[re".subj"]-> P;
                _anchor_ -> Y;
                Y [xpos="EX"];
            }
            commands {_anchor_.Cxn="Existential-ExistPred-ThereExpl";
                      P.CxnElt="Pivot";}
        }

        rule ex3 { %existential there-be
                pattern { 
                    _anchor_ [lemma="be"];
                    _anchor_ -[re".subj"]-> P;
                    _anchor_ -> Y;
                    Y [xpos="EX"];
                }
                commands {_anchor_.Cxn="Existential-CopPred-ThereExpl";
                          P.CxnElt="Pivot";}
            }

        rule ex4 { %existential there-stretch
                pattern { 
                    _anchor_ [lemma="stretch"];
                    _anchor_ -[re".subj"]-> P;
                    _anchor_ -> Y;
                    Y [xpos="EX"];
                }
                commands {_anchor_.Cxn="Existential-MannerPred-ThereExpl";
                          P.CxnElt="Pivot";}
            }

        rule ex5 { %existential here
            pattern { 
                _anchor_ [lemma="be"];
                _anchor_ -[re".subj"]-> P;
                _anchor_ -> Y;
                Y [lemma="here"];
            }
            commands {_anchor_.Cxn="Existential-CopPred-HereExpl";
                      P.CxnElt="Pivot";}
        }

    }
    package interrogatives {

        rule int1 { %direct WH question
            pattern {
                R-[root]->_anchor_;
                _anchor_-[punct]-> Q;
                Q.lemma = re".*[?].*";
                _anchor_ -> W;
                W [lemma = "who"|"what"|"when"|"how"|"why"|"which"|"whose"|"whom"|"where"]
            }
            commands {_anchor_.Cxn="Interrogative-WHInfo-Direct";
                    _anchor_.CxnElt="Clause";
                    W.CxnElt="WHWord";}
        }
    

        rule int2 {%direct WH, whose question
            pattern {
                R-[root]->_anchor_;
                _anchor_-[punct]-> Q;
                Q.lemma = re".*[?].*";
                _anchor_ -> N;
                N [xpos="NN"];
                N -> W;
                W [PronType=Int];
            }
            commands {_anchor_.Cxn="Interrogative-WHInfo-Direct";
                    _anchor_.CxnElt="Clause";
                    W.CxnElt="WHWord";
                    }
        }



        rule int3 { %no QM no inversion
            pattern {
                R-[root]->_anchor_;
                _anchor_ -> W;
                W [lemma = "who"|"what"|"when"|"how"|"why"|"which"|"whose"|"whom"|"where"];
                W << _anchor_
            }
            without { _anchor_-[nsubj]->W }
            without { 
                _anchor_-[punct]-> Q;
                Q.lemma = re".*[?].*";
            }
            without {
                _anchor_-[det:predet]->W; % exclamative e.g. "what a"
            }
            without { _anchor_[upos=NOUN]; _anchor_-[det]->W } % exlamative e.g. "what stunning views"
            without { _anchor_[upos=ADJ]; _anchor_-[advmod]->W } % exclamative e.g. "how rare!"
            without { _anchor_-[nsubj:outer]->S; S << W }
            without { W-[acl:relcl]->X }
            without { _anchor_-[cop|aux|aux:pass]->* }
            commands { _anchor_.Cxn="Interrogative-WHInfo-Direct";
                    _anchor_.CxnElt="Clause";
                    W.CxnElt="WHWord";
                    }
        }


        rule int4 { %no QM subject aux inversion
            pattern {
                R-[root]->_anchor_;
                _anchor_ -> W;
                W [lemma =     "who"|"what"|"when"|"how"|"why"|"which"|"whose"|"whom"|"where"];
                _anchor_-[cop|aux|aux:pass]->A;
                W << A
            }
            without { _anchor_-[nsubj]->W }
            without { 
                _anchor_-[punct]-> Q;
                Q.lemma = re".*[?].*";
            }
            without {
                _anchor_-[det:predet]->W; % exclamative e.g. "what a"
            }
            without { _anchor_[upos=NOUN]; _anchor_-[det]->W } % exlamative     e.g. "what stunning views"
            without { _anchor_[upos=ADJ]; _anchor_-[advmod]->W } % exclamative     e.g. "how rare!"
            without { _anchor_-[nsubj:outer]->S; S << W }
            without { W-[acl:relcl]->X }
            commands {_anchor_.Cxn="Interrogative-WHInfo-Direct";
                    _anchor_.CxnElt="Clause";
                    W.CxnElt="WHWord";
                    }
        }    

        rule int5 { %no QM wh-subject
            pattern {
                R-[root]->_anchor_;
                _anchor_ -> W;
                W [PronType=Int];
            }
            with { _anchor_-[nsubj]->W }
            without { 
                _anchor_-[punct]-> Q;
                Q.lemma = re".*[?].*";
            }
            without {
                _anchor_-[det:predet]->W; % exclamative e.g. "what a"
            }
            without { _anchor_[upos=NOUN]; _anchor_-[det]->W } % exlamative e.g. "what stunning views"
            without { _anchor_[upos=ADJ]; _anchor_-[advmod]->W } % exclamative e.g. "how rare!"
            without { _anchor_-[nsubj:outer]->S; S << W }
            without { W-[acl:relcl]->X }
            commands {_anchor_.Cxn="Interrogative-WHInfo-Direct";
                    _anchor_.CxnElt="Clause";
                    W.CxnElt="WHWord";
                    }
        }

        rule int6 {%direct Wh question metadata
            global { s_type = "wh"}
            pattern {
                R-[root]->_anchor_;
                W [PronType=Int];
            }
            without {
                W -[reparandum]-> X;
                X [PronType=Int];
            }
            without {
                X -[reparandum]-> W;
                X [PronType=Int];
            }
            without {
                X -[advcl|acl:relcl]-> Y;
                Y -> W;
            }
            commands {_anchor_.Cxn="Interrogative-WHInfo-Direct";
                    _anchor_.CxnElt="Clause";
                    W.CxnElt="WHWord";}
        }

        rule int7 {% direct YN metadata
            global { s_type = "q"}
            pattern {
                O -[root]-> _anchor_;
            }
            commands {_anchor_.Cxn="Interrogative-Polar-Direct";
                    _anchor_.CxnElt="Clause";}
        }


        rule int8 {% direct YN no metadata
            pattern {
                R -[root]-> _anchor_; 
                _anchor_ -[nsubj]-> N1;
                _anchor_ -[aux]-> A;
                A << N1;
                V -[punct]-> Q;
                Q [form="?"];
            }
            without { 
                _anchor_ -> W;
                W [lemma = "who"|"what"|"when"|"why"|"whom"|"which"|"whose"|"how"|"where"];
            }
            commands {_anchor_.Cxn="Interrogative-Polar-Direct";
            _anchor_.CxnElt="Clause";}
            }

        rule int9 {%indirect YN
            pattern {
                V.xpos = re"V.*";
                V -["ccomp"|"xcomp"]-> _anchor_;
                _anchor_ -[mark]-> Y;
                Y [lemma = "if"];
                V << Y;
            }
            commands {_anchor_.Cxn="Interrogative-Polar-Indirect";
                    _anchor_.CxnElt="Clause";}
        }
    

        rule int10 {%indirect wh
            pattern {
                V.xpos = re"V.*";
                V -[ccomp]-> _anchor_;
                _anchor_ -> Y;
                Y [PronType=Int];
                V << Y;
            }
        
            commands {_anchor_.Cxn="Interrogative-WHInfo-Indirect";
                    _anchor_.CxnElt="Clause";
                    Y.CxnElt="WHWord";
                    }
        }    

    }

    package npn {

        rule npn {
            pattern {
                _anchor_ [ xpos = re"N.*"];
                N2 [xpos = re"N.*" ];
                _anchor_.lemma = N2.lemma;
                _anchor_ -> N2;
                P[upos="ADP"];
                _anchor_ < P;
                P < N2;
            }
            without {
                N -[case]-> P2;
                P2 < N;
                P2 [lemma="from"];
            }
        without{ X -[fixed]-> _anchor_}

            commands {_anchor_.Cxn="NPN";
            _anchor_.CxnElt="N1";
                    P.CxnElt="P";
                    N2.CxnElt="N2";}
        }

    }
