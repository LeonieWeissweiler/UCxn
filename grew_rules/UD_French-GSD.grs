strat main { 
  Seq(
    Onf(conditionals),
    Onf(existentials),
    Onf(interrogatives),
    Onf(npn)
  )
}

package conditionals {
    rule Conditional {
        pattern {
            _anchor_-[advcl]->P;
            P-[mark]->SI;
            SI[lemma=si, upos=SCONJ]
        }
        without { P-[advmod]->M; M[lemma="même"] } % même si ...
        without {
            _anchor_[Mood=Cnd];
            P-[1=aux|cop]->A2;
            A2[Tense=Imp]
        }
        without {
            _anchor_-[1=aux|cop]->A1;
            A1[Mood=Cnd];
            P-[1=aux|cop]->A2;
            A2[Tense=Imp]; 
        }
        commands {
            _anchor_.Cxn = "Conditional";
            _anchor_.CxnElt = "Apodosis@p";
            P.CxnElt = "Protasis@f"
        }
    }

    rule Conditional-Reduced {
        pattern {
            _anchor_-[advcl]->P;
            P-[mark]->SI;
            SI[lemma=si, upos=SCONJ];            
        }
        without { P-[advmod]->M; M[lemma="même"] }
        without { P->D }
        commands {
            _anchor_.Cxn = "Conditional-Reduced";
            _anchor_.CxnElt = "Apodosis@p";
            P.CxnElt = "Protasis@f"
        }  
    }

    rule Conditional-NegativeEpistemic {
        pattern {
            _anchor_-[advcl]->P;
            _anchor_[Mood=Cnd];
            P-[mark]->SI;
            P-[1=aux|cop]->A2;
            A2[Tense=Imp];
            SI[lemma=si, upos=SCONJ];       
        }
        without { P-[advmod]->M; M[lemma="même"] }
        commands {
            _anchor_.Cxn = "Conditional-NegativeEpistemic";
            _anchor_.CxnElt = "Apodosis@p";
            P.CxnElt = "Protasis@f"
        }  
    }     

    rule Conditional-NegativeEpistemic_with_aux {
        pattern {
            _anchor_-[advcl]->P;
            _anchor_-[1=aux|cop]->A1;
            A1[Mood=Cnd];
            P-[mark]->SI;
            P-[1=aux|cop]->A2;
            A2[Tense=Imp]; 
            SI[lemma=si, upos=SCONJ];       
        }
        without { P-[advmod]->M; M[lemma="même"] }
        commands {
            _anchor_.Cxn = "Conditional-NegativeEpistemic";
            _anchor_.CxnElt = "Apodosis@p";
            P.CxnElt = "Protasis@f"
        }  
    }      
}


package existentials {

    rule Existential-HavePred-ItExpl-ThereExpl {
        pattern { 
            N1[lemma="y"]; N2 [lemma="avoir", !Cxn]; 
            N2-[expl:comp]->N1;
            N2 -[obj]->N3;
            N3[upos=NOUN]
        }   
        commands {
            N2.Cxn = "Existential-HavePred-ItExpl-ThereExpl";
            N3.CxnElt = "Pivot@f"
        }
    }

}

package interrogatives {

    rule Interrogative-WHInfo-Direct1 {
        pattern { 
            _anchor_->P;
            _anchor_[PronType=Int];
            P[lemma="?"]
        } 
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Direct";
            _anchor_.CxnElt = "Clause";
            _anchor_.CxnElt = "WHWord"
        }
    }

    rule Interrogative-WHInfo-Direct2 {
        pattern { 
            _anchor_->P;
            _anchor_->X; 
            X[PronType=Int];
            P[lemma="?"]
        }
        without {*-[conj]->_anchor_;}
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Direct";
            _anchor_.CxnElt = "Clause";
            X.CxnElt = "WHWord"
        }
    }

    rule Interrogative-WHInfo-Direct3 {
        pattern { 
        _anchor_->QM;
        _anchor_->X;
        X->Y;
        Y[PronType=Int];
        QM[lemma="?"]
        }
        without {*-[1=conj]->X }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Direct";
            _anchor_.CxnElt = "Clause";
            X.CxnElt = "WHWord"
        }
    }

    rule Interrogative-WHInfo-Indirect1 {
        pattern {
            e:_anchor_-[^conj|det]->P; 
            P[PronType=Int];
        }
        without { QM[lemma="?"] }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Indirect";
            _anchor_.CxnElt = "Clause";
            P.CxnElt = "WhWord"
        }
    }

    rule Interrogative-WHInfo-Indirect2 {
        pattern {
            _anchor_-[^conj]->X; 
            X-[det]->P;
            P[PronType=Int];
        }
        without { QM[lemma="?"] }
        commands {
            _anchor_.Cxn = "Interrogative-WHInfo-Indirect";
            _anchor_.CxnElt = "Clause";
            P.CxnElt = "WhWord"
        }
    }

    rule Interrogative-Polar-Direct {
        pattern { 
            _anchor_->QM;
            QM[lemma="?"]
        }
        without { _anchor_[PronType=Int]}
        without { X[PronType=Int]} 
        without { _anchor_-[conj]->Y; Y-[cc]->O;O[lemma=ou]}
        commands {
            _anchor_.Cxn = "Interrogative-Polar-Direct";
            _anchor_.CxnElt = "Clause"
        }
    }

    rule Interrogative-Polar-Indirect {
        pattern {
            _anchor_-[mark]-> SI;
            H-[ccomp]->_anchor_;
            SI[lemma=si]
        }
        without { QM[lemma="?"] }
        commands {
            _anchor_.Cxn = "Interrogative-Polar-Indirect";
            _anchor_.CxnElt = "Clause"
        }
    }

    rule Interrogative-Alternative {
        pattern { 
            _anchor_->P; P[lemma="?"];
            _anchor_-[conj]->X;
            X-[cc]->OR; OR[lemma=ou]
        }
        commands {
            _anchor_.Cxn = "Interrogative-Alternative";
            _anchor_.CxnElt = "Clause";
            _anchor_.CxnElt = "Choice1";
            X.CxnElt = "Choice2"
        }
    }


}

package npn {

    rule NPN {
        pattern { _anchor_[upos=NOUN]; P[upos=ADP]; N2[upos=NOUN]; 			
            _anchor_ < P; P < N2 ;
            _anchor_.lemma = N2.lemma
        }
        without {_anchor_ -[case]-> X; X << _anchor_} % To avoid patterns like 'de mains en mains' ou 'de jour en jour'
        without {X-[fixed]->_anchor_ } % To exclude 'de temps en temps'
        commands {
            _anchor_.Cxn = "NPN";
            _anchor_.CxnElt = "N1";
            P.CxnElt = "P";
            N2.CXnElt = "N2"
        }
    }

}