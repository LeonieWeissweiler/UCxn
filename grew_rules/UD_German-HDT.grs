strat main { 
  Seq(
    Onf(conditionals),
    Onf(existentials),
    Onf(interrogatives),
    Onf(npn)
    )
}

package conditionals {
  rule Cond1 { 
    pattern { 
      X [form="so"|"wenn"|"falls"|"sofern"|"soweit"|"So"|"Wenn"|"Falls"|"Sofern"|"Soweit", upos=SCONJ];
      P -[mark]-> X;
        _anchor_ -[advcl]-> P
    }
    without { P-[re".subj.*"]-> Z;}
    without {P -[cop]-> Z2;}
    without {P[upos="VERB"];}
    without {
      A[lemma="auch"|"selbst"|"Auch"|"Selbst"];
      X-[advmod]->A;
    }
    commands {
      _anchor_.Cxn="Conditional-Reduced";
      _anchor_.CxnElt="Apodosis";
      P.CxnElt="Protasis"
    }
  }

  rule Cond2 { 
    pattern { 
      X [form="so"|"wenn"|"falls"|"sofern"|"soweit"|"So"|"Wenn"|"Falls"|"Sofern"|"Soweit", upos=SCONJ];
      P -[mark]-> X;
      P[upos="VERB"];
      _anchor_ -[advcl]-> P
    }
    commands {
      _anchor_.Cxn="Conditional-MarkerSimple";
      _anchor_.CxnElt="Apodosis";
      P.CxnElt="Protasis"
    }
  }

  rule Cond3 { 
    pattern { 
      X[form="Angenommen"|"Vorausgesetzt"|"Unterstellt"];
      Y1[form<>"dass"|"daß"];
      Y2[form<>"dass"|"daß"];
      X < Y1;
      Y1 < Y2;
      X -[ccomp]-> P;
      X -[parataxis]-> _anchor_;
    }
    commands {
      _anchor_.Cxn="Conditional-MarkerSimple";
      _anchor_.CxnElt="Apodosis";
      P.CxnElt="Protasis"
    }
  }

  rule Cond4 { 
    pattern { 
      X[form="angenommen"|"vorausgesetzt"|"unterstellt"];
      Y1[form<>"dass"|"daß"];
      Y2[form<>"dass"|"daß"];
      A[upos=ADV];
      A < X;
      X < Y1;
      Y1 < Y2;
      root[form="__0__"];
      root<A;
      P[upos="VERB"];
      X -[ccomp]-> P;
      X -[parataxis]-> _anchor_;
    }
    commands {
      _anchor_.Cxn="Conditional-MarkerSimple";
      _anchor_.CxnElt="Apodosis";
      P.CxnElt="Protasis"
    }
  }

  rule Cond5 { 
    pattern { 
      P[upos=VERB|AUX,Mood<>Imp];
      root[form="__0__"];
      root<P;
      PUNCT[upos=PUNCT];
      P << PUNCT;
      A[upos=VERB|AUX];
      PUNCT < A;
    }
    commands {
      _anchor_.Cxn="Conditional-SubjVerbInversion";
      _anchor_.CxnElt="Apodosis";
      P.CxnElt="Protasis"
    }
  }

  rule Cond6 { 
    pattern { 
      P[upos=VERB|AUX,Mood<>Imp];
      root[form="__0__"];
      root<V1;
      PUNCT[upos=PUNCT];
      P << PUNCT;
      C[lemma="so"|"dann"];
      A[upos=VERB|AUX];
      PUNCT < C;
      C < A;
    }
    commands {
      _anchor_.Cxn=Conditional-SubjVerbInversion;
      _anchor_.CxnElt="Apodosis";
      P.CxnElt="Protasis"
    }
  }

  rule Cond7 { 
    pattern { 
      S[form="__0__"|"-"|"("|":"];
      S<X;
      X[form="Für"|"Gesetzt"|"für"|"gesetzt"];
      D[form="den"];
      F[form="Fall"];
      Y1[form="dass"|"daß"];
      K[form=","];
      X <D;
      D<F;
      F<K;
      K<Y1;
      _anchor_-[obl]->F;
      F-[ccomp]->P;
    }
    commands {
      _anchor_.Cxn=Conditional-Marker-Complex;
      _anchor_.CxnElt="Apodosis";
      P.CxnElt="Protasis"
    }
  }
}

package existentials {

  rule Ex1 { 
    pattern { 
      E[lemma="es"];
      _anchor_[lemma="geben"];
      _anchor_-[nsubj]->E;
      _anchor_-[obj]->P;
    }
    commands {
      _anchor_.Cxn=Existential-Expl;
      P.CxnElt="Pivot"
    }
  }

  rule Ex2 { 
    pattern { 
      D[lemma="da",upos=ADV];
      _anchor_[lemma="sein",upos=AUX];
      D-[cop]->_anchor_;
      D-[re".subj"]->P
    }
    commands {
      _anchor_.Cxn=Existential-There;
      P.CxnElt="Pivot"
    }
  }
}

package interrogatives {

  rule IntDir { 
    pattern { 
      F[lemma="?", upos=PUNCT];
      _anchor_-[punct]->F;
      W[PronType=re"Int.*"];
      W << F;
      _anchor_ -> W;
    } 
    commands {
      _anchor_.Cxn=Interrogative-WHInfo-Direct;
      _anchor_.CxnElt="Clause";
      W.CxnElt="WHWord"
    }
  }

  rule IntDirPol { 
    pattern { 
      F[lemma="?", upos=PUNCT];
      _anchor_-[punct]->F;
    } 
    without { W[PronType="Int,Rel"] }
    without { WI[PronType="Int"] }
    commands {
      _anchor_.Cxn="Interrogative-Polar-Direct";
		  _anchor_.CxnElt="Clause"
    }
  }

  rule IntOb { 
    pattern{
      O[lemma=ob];
      X[upos=CCONJ|PUNCT];
      X < O;
      _anchor_-[mark]->O
    }
    commands {
      _anchor_.Cxn="Interrogative-Polar-Indirect";
		  _anchor_.CxnElt="Clause"
    }
  }

  rule IntIndWh { 
    pattern{
      O[PronType="Int"|"Int,Rel"];
      X[upos=CCONJ|PUNCT];
      X < O;
      _anchor_-[advmod]->O;
    }
    without{ F[lemma="?"] }
    commands {
      _anchor_.Cxn="Interrogative-WHInfo-Indirect";
		  _anchor_.CxnElt="Clause"
    }
  }

  rule IntIndPrep2{ 
    pattern{
      W[PronType=re"Int.*"];
      X[upos=CCONJ|PUNCT];
      A[upos=ADP];
      X < A;
      A < W;
      _anchor_->W
    }
    without{ _anchor_-[det]->W }
    without{ F[lemma="?"] }
    commands {
    _anchor_.Cxn="Interrogative-WHInfo-Indirect";
	  _anchor_.CxnElt="Clause";
	  Q.CxnElt="WHWord"
	  }
  }

  rule IntIndPrep1{ 
    pattern{
      W[PronType=re"Int.*"];
      X[upos=CCONJ|PUNCT];
      A[upos=ADP];
      X < A;
      A < W;
      N-[det]->W;
      _anchor_->N
    }
    without{ F[lemma="?"] }
    commands {
    _anchor_.Cxn="Interrogative-WHInfo-Indirect";
	  _anchor_.CxnElt="Clause";
	  Q.CxnElt="WHWord"
	  }
  }
}

package npn {
  rule NPN { 
    pattern {
      _anchor_[upos=NOUN];
      N2[upos=NOUN];
      _anchor_.form = N2.form;
      P[upos=ADP];
      _anchor_ < P;
      P < N2
    }
    without{
      A[upos=ADP];
      A < _anchor_
    }
    commands {
      _anchor_.Cxn="NPN";
		  _anchor_.CxnElt="N1";
      P.CxnElt="P";
      N2.CxnElt="N2"
    }
  }
}