strat main { 
  Seq(
    Onf(conditionals),
    Onf(existentials),
    Onf(interrogatives),
    Onf(npn),
    Onf(resultatives)
  )
}

package conditionals {

  rule r3a { % Conditionals with 'om'
    pattern { 
      H -["advcl"|"advmod"]-> P;
      H[!Cxn];
      P-[mark]->M;
      M[lemma="om"|"ifall"];
    }
    commands {H.Cxn=Condition-Marker}
  }

  rule r3b { % Conditionals with inversion (main verb)
    pattern { 
      H -[advcl]-> P; 
      H [!Cxn];
      P -[nsubj]-> S;
      P << S
    }
    without { P -[mark]-> M }
    commands {H.Cxn=Condition-Inversion}
  }

  rule r3c { % Conditionals with inversion (copula)
    pattern { 
      H -[advcl]-> P; 
      H [!Cxn];
      P -[nsubj]-> S;
      P -[cop]-> C;
      C << S
    }
    without { P -[mark]-> M }
    commands {H.Cxn=Condition-Inversion}
  }
  
}

package existentials {

  rule r2 {
    pattern { 
      V [lemma="finnas"|"existera",  !Cxn];
      V -[re".subj"]-> S;
    }
    commands { V.Cxn=Existential }
  }

  rule r2_bis {
    pattern { 
      V [lemma="finnas"|"existera", Cxn<>re".*Existential.*"];
      V -[re".subj"]-> S;
    }
    commands { V.Cxn= V.Cxn + "," + "Existential" }
  }
}

package interrogatives {
  
  rule r1a { % Direct polar interrogatives (main verb)
    pattern { 
      R-[root]->V;
      V[upos="VERB"|"AUX", !Cxn];
      V-[punct]->P; 
      P[lemma="?"];
    }
    without { V->X; X << V }
    commands { V.Cxn=Interrogative-DirectPolar }
  }

  rule r1a_bis { % Direct polar interrogatives (main verb)
    pattern { 
      R-[root]->V;
      V[upos="VERB"|"AUX", Cxn<>re".*Interrogative-DirectPolar.*"];
      V-[punct]->P; 
      P[lemma="?"];
    }
    without { V->X; X << V }
    commands { V.Cxn= V.Cxn + "," + "Interrogative-DirectPolar" }
  }

  rule r1b { % Direct polar interrogatives (copula)
    pattern { 
      R-[root]->N;
      N[!Cxn];
      N-[cop]-> C;
      N-[punct]->P; 
      P[lemma="?"];
    }
    without { N->X; X << C }
    commands { N.Cxn=Interrogative-DirectPolar }
  }

  rule r1b_bis { % Direct polar interrogatives (copula)
    pattern { 
      R-[root]->N;
      N[Cxn<>re".*Interrogative-DirectPolar.*"];
      N-[cop]-> C;
      N-[punct]->P; 
      P[lemma="?"];
    }
    without { N->X; X << C }
    commands { N.Cxn= N.Cxn + "," + "Interrogative-DirectPolar" }
  }

  rule r1c { % Direct wh-interrogatives
    pattern {
      R-[root]->V;
      V[!Cxn];
      V-[punct]-> P;
      P [lemma="?"];
      V -> Q;
      Q [lemma = "vem"|"vad"|"vilken"|"var"|"när"|"hur"|"varför"]
    }
    commands { V.Cxn=Interrogative-DirectInformation }
  }

  rule r1c_bis { % Direct wh-interrogatives
    pattern {
      R-[root]->V;
      V[Cxn<>re".*Interrogative-DirectInformation.*"];
      V-[punct]-> P;
      P [lemma="?"];
      V -> Q;
      Q [lemma = "vem"|"vad"|"vilken"|"var"|"när"|"hur"|"varför"]
    }
    commands { V.Cxn= V.Cxn + "," + Interrogative-DirectInformation }
  }

  rule r1d { % Indirect polar interrogatives
    pattern { 
      V -["ccomp"|"xcomp"]-> P;
      P [!Cxn];
      P -["mark"]-> M;
      M[lemma="om"|"huruvida"]
    }
    commands {P.Cxn=Interrogative-IndirectPolar}
  }

  rule r1d_bis { % Indirect polar interrogatives
    pattern { 
      V -["ccomp"|"xcomp"]-> P;
      P [Cxn<>re".*Interrogative-IndirectPolar.*"];
      P -["mark"]-> M;
      M[lemma="om"|"huruvida"]
    }
    commands {P.Cxn=P.Cxn + "," + "Interrogative-IndirectPolar"}
  }

  rule r1e { % Indirect wh-interrogatives
    pattern {
      V-["ccomp"|"xcomp"]->P;
      P[!Cxn];
      P -> W;
      W[lemma = "vem"|"vad"|"vilken"|"var"|"när"|"hur"|"varför"]
    }
    without { V -["mark"]-> M }
    commands {P.Cxn=Interrogative-IndirectInformation}
  }

  rule r1e { % Indirect wh-interrogatives
    pattern {
      V-["ccomp"|"xcomp"]->P;
      P[Cxn<>".*Interrogative-IndirectInformation.*"];
      P -> W;
      W[lemma = "vem"|"vad"|"vilken"|"var"|"när"|"hur"|"varför"]
    }
    without { V -["mark"]-> M }
    commands {P.Cxn= PCxn + "," + "Interrogative-IndirectInformation"}
  }

}

package npn {

  rule r5 { % NPN 
    pattern { 
      N1[upos=NOUN, !Cxn]; 
      P[upos=ADP]; 
      N2[upos=NOUN];
      N1 -> N2;
      N1 < P; P < N2 ;
      N1.lemma = N2.lemma;
    }            
    without { X-[fixed]->N1 }
    without { N1-[case]->X; X << N1 }
    commands {N1.Cxn=NPN}
  }

  rule r5_bis { % NPN 
    pattern { 
      N1[upos=NOUN, Cxn<>re".*NPN.*"]; 
      P[upos=ADP]; 
      N2[upos=NOUN];
      N1 -> N2;
      N1 < P; P < N2 ;
      N1.lemma = N2.lemma;
    }            
    without { X-[fixed]->N1 }
    without { N1-[case]->X; X << N1 }
    commands {N1.Cxn = N1.Cxn + "," + NPN}
  }

}

package resultatives {

  rule r4 { % Resultative (only with “göra” [make])
    pattern { 
      V[upos="VERB", lemma = "göra", !Cxn,];
      X [upos="ADJ"];
      V -[xcomp]-> X;
      V -[obj|iobj|nsubj:pass]-> O;
    }
    commands { V.Cxn=Resultative }
  }

  rule r4_bis { % Resultative (only with “göra” [make])
    pattern { 
      V[upos="VERB", lemma = "göra", Cxn<>re".*Resultative.*"];
      X [upos="ADJ"];
      V -[xcomp]-> X;
      V -[obj|iobj|nsubj:pass]-> O;
    }
    commands { V.Cxn=V.Cxn + "," + "Resultative" }
  }

}